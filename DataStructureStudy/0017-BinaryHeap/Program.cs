/*
在软件设计相关领域，“堆（Heap）”的概念主要涉及到两个方面：

    一种是数据结构，逻辑上是一颗完全二叉树，存储上是一个数组对象（二叉堆）, 另一种是垃圾收集存储区，是软件系统可以编程的内存区域。

堆排序所指的是第一种情况
    堆排序的时间复杂度是O(nlog2n),与快速排序达到相同的时间复杂度. 
    但是在实际应用中,我们往往采用快速排序而不是堆排序. 
    这是因为快速排序的一个好的实现,往往比堆排序具有更好的表现. 
    堆排序的主要用途,是在形成和处理优先级队列方面. 
    另外, 如果计算要求是类优先级队列(比如, 只要返回最大或者最小元素, 只有有限的插入要求等), 堆同样是很适合的数据结构.

 

堆排序
    堆排序是一种选择排序。是不稳定的排序方法。时间复杂度为O(nlog2n)。
堆排序的特点是：
    在排序过程中，将排序数组看成是一棵完全二叉树的顺序存储结构，
    利用完全二叉树中双亲节点和孩子节点之间的内在关系，在当前无序区中选择关键字最大(或最小)的记录。

 

基本思想
    1.将要排序的数组创建为一个大根堆。大根堆的堆顶元素就是这个堆中最大的元素。
    2.将大根堆的堆顶元素和无序区最后一个元素交换，并将无序区最后一个位置例入有序区，然后将新的无序区调整为大根堆。
    重复操作，无序区在递减，有序区在递增。
    初始时，整个数组为无序区，第一次交换后无序区减一，有序区增一。
    每一次交换，都是大根堆的堆顶元素插入有序区，所以有序区保持是有序的。


大根堆和小根堆
    堆：是一颗完全二叉树。
    大根堆：所有节点的子节点比其自身小的堆
    小根堆：所有节点的子节点比其自身大的堆

 

堆与数组的关系
    堆是一种逻辑结构（形象的表示数据的存储格式），
    数组则是数据的实际存储结构（对应数据的存储地址），
    堆中的根节点与左右子节点在存储数组中的位置关系如下：
        假设根节点在数组中的位置（数组下标）为 i ，
        那么左节点在数组中的位置（数组下标）为 i * 2 + 1 ，
        右节点在数组中的位置（数组下标）为 i * 2 + 2 。
*/

using System;
namespace BinaryHeap
{
    class MainClass
    {
        public static void Main(string[] args)
        {
            int[] data = { 50, 10, 90, 30, 70, 40, 80, 60, 20 };

            HeapSort_Array heapSort_Array = new HeapSort_Array();

            heapSort_Array.HeapSort(data);

            foreach (var i in data)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine();
        }
    }
}
